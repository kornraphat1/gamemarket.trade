{"remainingRequest":"C:\\xampp\\htdocs\\game-market\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp\\htdocs\\game-market\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\game-market\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\game-market\\src\\views\\Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"C:\\xampp\\htdocs\\game-market\\src\\views\\Home.vue","mtime":1633430355967},{"path":"C:\\xampp\\htdocs\\game-market\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\game-market\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\game-market\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\game-market\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}